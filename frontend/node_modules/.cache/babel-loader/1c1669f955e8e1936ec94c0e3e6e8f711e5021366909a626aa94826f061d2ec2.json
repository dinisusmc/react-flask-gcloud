{"ast":null,"code":"var _jsxFileName = \"/Users/dinis/work_area/semper/src/components/Particle.jsx\",\n  _s = $RefreshSig$();\nimport { opts } from '../common';\nimport { useEffect, useMemo, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\n// import { loadAll } from \"@tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Particle = () => {\n  _s();\n  const [init, setInit] = useState(false);\n\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async engine => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n  const particlesLoaded = container => {\n    null;\n  };\n  if (init) {\n    return /*#__PURE__*/_jsxDEV(Particles, {\n      id: \"tsparticles\",\n      particlesLoaded: particlesLoaded,\n      options: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Particle, \"ZeGOyvJu811hnKdhoCawhpLF0Nw=\");\n_c = Particle;\nexport default Particle;\nvar _c;\n$RefreshReg$(_c, \"Particle\");","map":{"version":3,"names":["opts","useEffect","useMemo","useState","Particles","initParticlesEngine","loadSlim","jsxDEV","_jsxDEV","Fragment","_Fragment","Particle","_s","init","setInit","engine","then","particlesLoaded","container","id","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dinis/work_area/semper/src/components/Particle.jsx"],"sourcesContent":["import { opts } from '../common';\nimport { useEffect, useMemo, useState } from \"react\";\nimport Particles, { initParticlesEngine } from \"@tsparticles/react\";\n// import { loadAll } from \"@tsparticles/all\"; // if you are going to use `loadAll`, install the \"@tsparticles/all\" package too.\n// import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too.\nimport { loadSlim } from \"@tsparticles/slim\"; // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too.\n// import { loadBasic } from \"@tsparticles/basic\"; // if you are going to use `loadBasic`, install the \"@tsparticles/basic\" package too.\n\nconst Particle = () => {\n  const [init, setInit] = useState(false);\n\n  // this should be run only once per application lifetime\n  useEffect(() => {\n    initParticlesEngine(async (engine) => {\n      // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n      // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n      // starting from v2 you can add only the features you need reducing the bundle size\n      //await loadAll(engine);\n      //await loadFull(engine);\n      await loadSlim(engine);\n      //await loadBasic(engine);\n    }).then(() => {\n      setInit(true);\n    });\n  }, []);\n\n  const particlesLoaded = (container) => {\n    null;\n  };\n\n\n  if (init) {\n    return (\n      <Particles\n        id=\"tsparticles\"\n        particlesLoaded={particlesLoaded}\n        options={opts}\n      />\n    );\n  }\n\n  return <></>;\n};\n\nexport default Particle;"],"mappings":";;AAAA,SAASA,IAAI,QAAQ,WAAW;AAChC,SAASC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,OAAOC,SAAS,IAAIC,mBAAmB,QAAQ,oBAAoB;AACnE;AACA;AACA,SAASC,QAAQ,QAAQ,mBAAmB,CAAC,CAAC;AAC9C;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEvC;EACAF,SAAS,CAAC,MAAM;IACdI,mBAAmB,CAAC,MAAOU,MAAM,IAAK;MACpC;MACA;MACA;MACA;MACA;MACA,MAAMT,QAAQ,CAACS,MAAM,CAAC;MACtB;IACF,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACZF,OAAO,CAAC,IAAI,CAAC;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAIC,SAAS,IAAK;IACrC,IAAI;EACN,CAAC;EAGD,IAAIL,IAAI,EAAE;IACR,oBACEL,OAAA,CAACJ,SAAS;MACRe,EAAE,EAAC,aAAa;MAChBF,eAAe,EAAEA,eAAgB;MACjCG,OAAO,EAAEpB;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAEN;EAEA,oBAAOhB,OAAA,CAAAE,SAAA,mBAAI,CAAC;AACd,CAAC;AAACE,EAAA,CAlCID,QAAQ;AAAAc,EAAA,GAARd,QAAQ;AAoCd,eAAeA,QAAQ;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}